o Refactor
  - Fix XXXes all over the place.  There are way too many bloopers now.
  - Add comments to methods, use best practices
  - Consider extendig test coverage to some more 
    things that looks brittle (cascading comes to mind).
  - Look over the whole return-value/exception thing wrt return values.
    - It does not make sense to raise a 404 when in reality an empty list is
      what's realy there
  - Add an ability to delete meta-instances


o Add users
  o Add API user login to the test cases involving basically
    everything that has to do with users.
  o Associate media/meta/jobs with users in the sense that
    only authorized users will get access to things. 
  o Consider adding OAUth users, that log in using
    google/yahoo/facebook/whatever authentication
    to access "their" data, and trigger agents
    to work on their behalf.

o Refactor the client design into becoming (more) complex workers.

o Make some kind of API that makes it possible to add lingering
  clients that activates when somethign of interest happens.

  - Probe for interesting tasks?
  - Probe for interesting media types (to add tasks?)
  - 0MQ or RMQ?

o Write management scripts for elastic beanstalk that will let us
  create a new database instance when required.

o Necessary refactoring:
  o Esthetics
      - Read throught the coding standards for Python and become
        more compliant
      - Better esthetics, documentation and readability
      - Get someone with practice in python programming to critique the code
      - Get some gerrit-like service to use for that?

  o Make the metadata contain some automatically generated fields,
     and then a separate namespace for the user-provided data.  This
     will be -exactly- the same schema we need to use for tasks.
     That is a symmetry we may be able to use in some way. 
   o The content/metadata  API is a bit screwed.  It needs to be
       refactored into prettiness asap.
   o Then the whole test infrastructure needs to be brought
      in line with this refactoring, then we can proceed.

o Possibly useful features
  o Identity
  o Ownership
  o Access control lists
  o Oauth? Using Google IDs or perhaps Yahoo IDs.
  o Ensure that we can upload really big data objects (images, movies)

