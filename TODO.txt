o Necessary refactoring:
  o Make the metadata contain some automatically generated fields,
     and then a separate namespace for the user-provided data.  This
     will be -exactly- the same schema we need to use for tasks.
     That is a symmetry we may be able to use in some way. 
   o The content/metadata  API is a bit screwed.  It needs to be
       refactored into prettiness asap.
   o Then the whole test infrastructure needs to be brought
      in line with this refactoring, then we can proceed.


o Make some more roundtrip tests.
  o One that access state associated with a particular document, then
     first reads from  then writes a result to the media storage.
  
  o Make one of them  into an acceptance test that is run before a
     deployment is made and after a deployment has been made.
     If it fails, then automatically roll back to previous version? 

o Make a minimal library for managing access to the service, based
   on code in the roundtrip tests.

o Make a small worker that does something to an image.
    
o Send/receive task parameters
o Start making a proper library for submitting/picking up tasks.

o Refactor to make things nice.
  - Introduce some directory structure doc/src
  - Separate test code into separate directory
o Make some tests that work against the EC2 installed 
  instance, to check that it actually does something useful.
o Ensure that we an add some proper parameters to the task descriptions
o Ensure that we can upload big data objects
o Add some kind of security (preferably oauth) that can use
  e.g. google IDs.
o Write a backend for postgresql.
o Write some code that actually uses the ting to do something useful,
   such as identifying images with faces.

