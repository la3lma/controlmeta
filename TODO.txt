

o Break everything!
  o Mold everything intto a large-scale flask app, modelled
    after https://github.com/mitsuhiko/flask/wiki/Large-app-how-to

o Make it work, goddamit!
  o Unit tests
  o Running application
  o Make it nice.

o Rewrite the task storage to use the sql-based persistence.
  o Make the the unit tests for the whole thing use the simple memory based sql thing.
     o  Follow through on unit tests
  o First do the task storage, then do the media storage.
  o Then deploy to the service@amazon.
  o Then create a mysql db and start using that instead of the in-memory thing.
    - Think hard about how to test that.  
    - This should be something that is tested/changed only very rarely

o Write backends for postgresql and the serverless SQLite database
  - Run regression tests against the SQLite database on the
    developer workstation, perhaps also the unit tests?

o Necessary refactoring:
  o Esthetics
      - Read throught the coding standards for Python and become
        more compliant
      - Better esthetics, documentation and readability
      - Get someone with practice in python programming to critique the code
      - Get some gerrit-like service to use for that?

  o Make the metadata contain some automatically generated fields,
     and then a separate namespace for the user-provided data.  This
     will be -exactly- the same schema we need to use for tasks.
     That is a symmetry we may be able to use in some way. 
   o The content/metadata  API is a bit screwed.  It needs to be
       refactored into prettiness asap.
   o Then the whole test infrastructure needs to be brought
      in line with this refactoring, then we can proceed.

o Oauth?
o Make a small worker that does something to an image.
o Send/receive task parameters
o Start making a proper library for submitting/picking up tasks.

o Refactor to make things nice.
  - Introduce some directory structure doc/src
  - Separate test code into separate directory
o Make some tests that work against the EC2 installed 
  instance, to check that it actually does something useful.
o Ensure that we an add some proper parameters to the task descriptions
o Ensure that we can upload big data objects
o Add some kind of security (preferably oauth) that can use
  e.g. google IDs.
o Write some code that actually uses the ting to do something useful,
   such as identifying images with faces.

